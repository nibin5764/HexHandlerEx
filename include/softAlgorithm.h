//提供一些软算法的接口实现
#pragma once

#include "ByteArray.h"



//////////////////////////////////////////////////////////////////////////
// 3DES算法
//////////////////////////////////////////////////////////////////////////
enum SYMM_OP_TYPE
{
	ECB_ENCRYPT = 1,
	ECB_DECRYPT,
	CBC_ENCRYPT,
	CBC_DECRYPT
};
int CalcDes3(ByteArray &outData, SYMM_OP_TYPE type, const ByteArray &inData, unsigned int inDataLength, const ByteArray &key, const ByteArray &iv);

//////////////////////////////////////////////////////////////////////////
// AES算法
//////////////////////////////////////////////////////////////////////////
int CalcAES(ByteArray &outData, SYMM_OP_TYPE type, const ByteArray &inData, const ByteArray &key, const ByteArray &iv);

//////////////////////////////////////////////////////////////////////////
// MD5算法
//////////////////////////////////////////////////////////////////////////
int CalcMd5(ByteArray &outData, const ByteArray &inData, unsigned int inDataLen);

//////////////////////////////////////////////////////////////////////////
// SHA1/SHA256/SHA384/SHA512
//////////////////////////////////////////////////////////////////////////
int CalcSha1(ByteArrayBuffer &outData, const ByteArray &inData);
int CalcSha256(ByteArrayBuffer &outData, const ByteArray &inData);
int CalcSha384(ByteArrayBuffer &outData, const ByteArray &inData);
int CalcSha512(ByteArrayBuffer &outData, const ByteArray &inData);

//////////////////////////////////////////////////////////////////////////
// SM3算法
//////////////////////////////////////////////////////////////////////////
int CalcSM3(ByteArrayBuffer &outData, const ByteArray &inData);

//////////////////////////////////////////////////////////////////////////
// SM4算法
//////////////////////////////////////////////////////////////////////////
int CalcSM4(ByteArrayBuffer &outData, SYMM_OP_TYPE type, const ByteArray &inData, const ByteArray &key, const ByteArray &iv);

//////////////////////////////////////////////////////////////////////////
// 获取随机数
//////////////////////////////////////////////////////////////////////////
int GenRandomByLength(int length, ByteArrayBuffer &random);

//////////////////////////////////////////////////////////////////////////
// 公钥加密/公钥验签
//////////////////////////////////////////////////////////////////////////
int RSAPublicKeyEncrypt(const ByteArray &modulus, const ByteArray &inData, ByteArray& outData);


